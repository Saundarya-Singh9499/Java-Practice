package JAVAPracticeOfDSA;

import java.util.Scanner;

import BinaryTrees1.BinaryTreeNode;

public class SumBinaryTree {

public static BinaryTreeNode<Integer> takeInput(boolean isRoot , int parentData , boolean isLeft){
		
	     if(isRoot) {
	    	 
	    	 System.out.println("Enter the Root Data");
	     }
	
	     else if(isLeft) {
	    	 
	    	 System.out.println("Enter the Left Child of " + parentData);
	     }

	     else {
	    	 
	    	 System.out.println("Enter the Right Child of " + parentData);
	     }
   
       Scanner sc = new Scanner(System.in);
       
       int rootData = sc.nextInt();
       
       if(rootData == -1) {
    	   
    	   return null;
       }

          BinaryTreeNode<Integer> root = new BinaryTreeNode<>(rootData);
          
          BinaryTreeNode<Integer> rootNext = new BinaryTreeNode<>(rootData);
          
          BinaryTreeNode<Integer> leftChild = takeInput(false, rootData, true);
          
          BinaryTreeNode<Integer> rightChild = takeInput(false, rootData, true);
          
          root.left = leftChild;
          
          root.right = rightChild;
          
          return root;
  }
	
	public static int sumBinaryTree( BinaryTreeNode<Integer> root , int num ) {
		
		if( root == null ) {
			
			return 0;
		}
	
	         
		     int left = sumBinaryTree(root.left, num);
	          
	         int right = sumBinaryTree(root.right, num);
	
	
	}

    public static void main(String[] args) {
		

	}

}
